from utils.base_page import BasePage
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from utils.config import Config
from selenium.webdriver.chrome.options import Options
import time
import json
import random


def run_account(base_page, account_key, account_data):
    """X·ª≠ l√Ω crawl 1 account."""
    group_url = account_data.get("url2", "")
    emso_username = account_data.get("username")
    emso_password = account_data.get("password")
    post_url = account_data.get("url1")

    if not group_url or not emso_username or not emso_password or not post_url:
        print(f"[SKIP] B·ªè qua account {account_key} v√¨ thi·∫øu d·ªØ li·ªáu.")
        return False

    success = base_page.scroll_to_element_and_crawl(
        username=emso_username,
        password=emso_password,
        nums_post=1,
        crawl_page=group_url,
        post_page=post_url,
        page=True
    )

    if success:
        print(f"[DONE] Ho√†n t·∫•t x·ª≠ l√Ω t√†i kho·∫£n: {account_key}")
        base_page.clear_media_folder()
        return True
    else:
        print(f"[FAIL] Kh√¥ng crawl ƒë∆∞·ª£c b√†i ƒëƒÉng cho {account_key}")
        return False


def main():
    # Load c·∫•u h√¨nh
    config = Config()

    # Kh·ªüi t·∫°o Chrome
    service = Service(config.CHROME_DRIVER_PATH)
    chrome_options = Options()
    chrome_options.add_argument("--incognito")
    chrome_options.add_argument("--disable-notifications")
    # chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920x1080")
    driver = webdriver.Chrome(service=service, options=chrome_options)

    base_page = BasePage(driver)
    accounts_filename = "data/account.json"
    data_filename = "data/data.json"

    # ƒê·ªçc th√¥ng tin login Facebook
    with open(data_filename, "r") as data_file:
        data = json.load(data_file)

    driver.maximize_window()

    try:
        # ƒêƒÉng nh·∫≠p Facebook
        facebook_account = data.get("account_facebook", {})
        email_facebook = facebook_account.get("email")
        password_facebook = facebook_account.get("password")

        driver.get(config.FACEBOOK_URL)
        base_page.login_facebook(email_facebook, password_facebook)
        time.sleep(15)
        driver.back()
        base_page.login_facebook(email_facebook, password_facebook)

        print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v√†o Facebook.")
        print("üîÑ B·∫Øt ƒë·∫ßu ch·∫°y ch∆∞∆°ng tr√¨nh...")

        # Bi·∫øn qu·∫£n l√Ω v√≤ng l·∫∑p th∆∞·ªùng
        normal_index = 0
        normal_count = 0

        while True:
            # ƒê·ªçc d·ªØ li·ªáu account
            with open(accounts_filename, "r") as file:
                accounts_data = json.load(file)

            # T√°ch ∆∞u ti√™n v√† th∆∞·ªùng
            priority_keywords = ["beat", "24h", "tintuc", "hong", "tin", "office"]
            priority_accounts, normal_accounts = [], []

            for account_key, account_data in accounts_data.items():
                group_url = account_data.get("url2", "").lower()
                if any(keyword in group_url for keyword in priority_keywords):
                    priority_accounts.append((account_key, account_data))
                else:
                    normal_accounts.append((account_key, account_data))

            print(f"\nüîë Page ∆∞u ti√™n: {len(priority_accounts)}")
            print(f"üìÑ Page th∆∞·ªùng: {len(normal_accounts)}")

            # --- 1. Ch·∫°y 5 page ∆∞u ti√™n ---
            if priority_accounts:
                selected_priority = random.sample(
                    priority_accounts, min(5, len(priority_accounts))
                )
                print(f"\n=== B·∫Øt ƒë·∫ßu block ∆∞u ti√™n ({len(selected_priority)} page) ===")
                for account_key, account_data in selected_priority:
                    try:
                        print(f"[PRIORITY] ƒêang x·ª≠ l√Ω: {account_key} - {account_data.get('url2')}")
                        success = run_account(base_page, account_key, account_data)
                        if success:
                            print(f"‚è≥ Ngh·ªâ {config.POST_DELAY} gi√¢y...\n")
                            time.sleep(config.POST_DELAY)
                    except Exception as e:
                        print(f"[ERROR] L·ªói ∆∞u ti√™n {account_key}: {e}")

            # --- 2. Ch·∫°y page th∆∞·ªùng (t·ªëi ƒëa 20) ---
            if normal_accounts:
                print(f"\n=== B·∫Øt ƒë·∫ßu block th∆∞·ªùng (t·ªëi ƒëa 20 page) ===")
                while normal_count < 20:
                    account_key, account_data = normal_accounts[normal_index]

                    try:
                        print(f"[NORMAL] ƒêang x·ª≠ l√Ω: {account_key} - {account_data.get('url2')}")
                        success = run_account(base_page, account_key, account_data)
                        if success:
                            print(f"‚è≥ Ngh·ªâ {config.POST_DELAY} gi√¢y...\n")
                            time.sleep(config.POST_DELAY)
                    except Exception as e:
                        print(f"[ERROR] L·ªói th∆∞·ªùng {account_key}: {e}")

                    # TƒÉng index + count
                    normal_index += 1
                    normal_count += 1

                    # N·∫øu h·∫øt list th∆∞·ªùng th√¨ quay l·∫°i t·ª´ ƒë·∫ßu
                    if normal_index >= len(normal_accounts):
                        print("üîÑ H·∫øt list th∆∞·ªùng, quay l·∫°i t·ª´ ƒë·∫ßu.")
                        normal_index = 0

                # Reset b·ªô ƒë·∫øm sau khi xong 20 th∆∞·ªùng
                normal_count = 0

    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng: {e}")
    finally:
        driver.quit()


if __name__ == "__main__":
    main()
